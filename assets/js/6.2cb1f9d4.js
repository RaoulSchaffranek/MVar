(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{206:function(t,a,e){"use strict";e.r(a);var s=e(0),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"mvar-docs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvar-docs"}},[t._v("#")]),t._v(" MVar Docs")]),t._v(" "),e("h2",{attrs:{id:"introduction"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[t._v("#")]),t._v(" Introduction")]),t._v(" "),e("p",[t._v("MVar is a low-level library for concurrent programming in TypeScript and JavaScript. It provides a single data type of the same name, inspired by "),e("a",{attrs:{href:"http://hackage.haskell.org/package/base-4.12.0.0/docs/Control-Concurrent-MVar.html#t:MVar",target:"_blank",rel:"noopener noreferrer"}},[t._v("Haskell's MVar"),e("OutboundLink")],1),t._v(". An "),e("code",[t._v("MVar")]),t._v(" represents an abstract resource that can be shared by multiple concurrent tasks. Access-operations on MVars are atomic and serve as synchronization primitives between concurrent tasks.")]),t._v(" "),e("p",[t._v("An "),e("code",[t._v("MVar")]),t._v(" is always in one of two states: It's either empty or holds some value. The two most important operations are "),e("code",[t._v("put")]),t._v(" for writing to the MVar and "),e("code",[t._v("take")]),t._v(" for reading its contents. Unlike traditional variables, the "),e("code",[t._v("put")]),t._v(" methods first checks if the "),e("code",[t._v("MVar")]),t._v(" is currently empty. If that's the case, then "),e("code",[t._v("put")]),t._v(" writes the supplied value to the "),e("code",[t._v("MVar")]),t._v("; otherwise, it queues the value for later consumption. Similarly, "),e("code",[t._v("take")]),t._v(" first checks if the "),e("code",[t._v("MVar")]),t._v(" is currently full. In that case, "),e("code",[t._v("take")]),t._v(" returns the contents wrapped in a promise which is synchronously resolved. Otherwise, "),e("code",[t._v("take")]),t._v(" returns a promise, which is resolved as soon as the "),e("code",[t._v("MVar")]),t._v(" becomes full. When the promise resolves, the "),e("code",[t._v("MVar")]),t._v(" contents are replaced with the next value, that was queued by "),e("code",[t._v("put")]),t._v(" if one is available; otherwise, it's left empty.")]),t._v(" "),e("h3",{attrs:{id:"why-mvar"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#why-mvar"}},[t._v("#")]),t._v(" Why MVar?")]),t._v(" "),e("p",[t._v("MVar is developed as part of a runtime-system-extension for another programming-language called "),e("a",{attrs:{href:"https://www.idris-lang.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Idris"),e("OutboundLink")],1),t._v(". Existing concurrency libraries were either too heavyweight or too high-level for this purpose. Thus, the goal of MVar is to support library-authors and compiler-implementors to provide higher-level concurrency abstractions.")]),t._v(" "),e("h3",{attrs:{id:"why-not"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#why-not"}},[t._v("#")]),t._v(" Why not?")]),t._v(" "),e("p",[t._v("Application-developers, on the other hand, are advised to choose a higher-level library for concurrency. For instance, a "),e("a",{attrs:{href:"https://redux.js.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("redux-store"),e("OutboundLink")],1),t._v(" is very similar to an MVar. It also synchronizes control-flow and additionally manages application-state through state-reducers.")]),t._v(" "),e("h2",{attrs:{id:"installation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#installation"}},[t._v("#")]),t._v(" Installation")]),t._v(" "),e("p",[t._v("MVar is available as a npm-package.")]),t._v(" "),e("p",[t._v("When using npm:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" i mvar\n")])])]),e("p",[t._v("When using yarn:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" mvar\n")])])]),e("h2",{attrs:{id:"importing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#importing"}},[t._v("#")]),t._v(" Importing")]),t._v(" "),e("p",[t._v("TypeScript / ES6")]),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("MVar"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'mvar'")]),t._v("\n")])])]),e("p",[t._v("ES5 (CommonJS)")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" MVar "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'mvar'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MVar\n")])])]),e("p",[t._v("ES5 (UMD build)")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" MVar "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mvar"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MVar\n")])])]),e("h2",{attrs:{id:"example"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[t._v("#")]),t._v(" Example")]),t._v(" "),e("p",[t._v("Let's write a simple counter-application using MVar. The application will have\nbuttons to increment and decrement the counter. We will use an MVar to mediate\nthe button-clicks through a synchronized communication-channel and implement\nan explicit event-loop on top of it:")]),t._v(" "),e("iframe",{staticStyle:{width:"100%","min-height":"41rem"},attrs:{src:"https://stackblitz.com/edit/mvar-counter?embed=1&file=index.ts&hideExplorer=1"}}),t._v(" "),e("h2",{attrs:{id:"api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[t._v("#")]),t._v(" API")]),t._v(" "),e("h3",{attrs:{id:"mvar-newempty"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvar-newempty"}},[t._v("#")]),t._v(" "),e("code",[t._v("MVar.newEmpty")])]),t._v(" "),e("p",[t._v("Create an MVar which is initially empty.")]),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" mvar "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" MVar"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("newEmpty")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"mvar-new"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvar-new"}},[t._v("#")]),t._v(" "),e("code",[t._v("MVar.new")])]),t._v(" "),e("p",[t._v("Create an MVar which contains the supplied value.")]),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" mvar "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" MVar"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"mvar-prototype-take"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvar-prototype-take"}},[t._v("#")]),t._v(" "),e("code",[t._v("MVar.prototype.take")])]),t._v(" "),e("p",[t._v("Return the contents of the MVar wrapped in a promise.")]),t._v(" "),e("p",[t._v("If the MVar is empty, the promise resolves once the MVar becomes full.\nIf the MVar is full, the returned promise resolves synchronously\nwith the contents.")]),t._v(" "),e("p",[t._v("When the promise is resolved, the MVar is left empty.")]),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[t._v("mvar"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("take")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"mvar-prototype-put"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvar-prototype-put"}},[t._v("#")]),t._v(" "),e("code",[t._v("MVar.prototype.put")])]),t._v(" "),e("p",[t._v("Put a value into an MVar.")]),t._v(" "),e("p",[t._v("If the MVar is empty, sets the contents of the MVar.\nIf the MVar is full, queues the value until the MVar becomes empty.")]),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[t._v("mvar"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"mvar-prototype-read"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvar-prototype-read"}},[t._v("#")]),t._v(" "),e("code",[t._v("MVar.prototype.read")])]),t._v(" "),e("p",[t._v("Read the contents of an MVar wrapped in a promise.")]),t._v(" "),e("p",[t._v("If the MVar is empty, the returned promise is resolved once the MVar\nbecomes full.\nIf the MVar is full, the returned promise is synchronously\nresolved with the contents.")]),t._v(" "),e("p",[t._v("Read does not alter the contents of the MVar.")]),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[t._v("mvar"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"mvar-prototype-swap"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvar-prototype-swap"}},[t._v("#")]),t._v(" "),e("code",[t._v("MVar.prototype.swap")])]),t._v(" "),e("p",[t._v("Take a value from an MVar, put a new value into the MVar and return the old value wrapped in a promise.")]),t._v(" "),e("p",[t._v("If the MVar is empty, the promise resolves once the MVar becomes full.\nIf the MVar is full, the returned promise resolves synchronously\nwith the contents.")]),t._v(" "),e("p",[t._v("Queues the supplied value for later consumption.")]),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[t._v("mvar"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"mvar-prototype-trytake"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvar-prototype-trytake"}},[t._v("#")]),t._v(" "),e("code",[t._v("MVar.prototype.tryTake")])]),t._v(" "),e("p",[t._v("A synchronous version of take.")]),t._v(" "),e("p",[t._v("If the MVar is empty, throws an exception.\nIf the MVar is full, returns the contents of the MVar.")]),t._v(" "),e("p",[t._v("After tryTake executed, the MVar is left empty.")]),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[t._v("mvar"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("tryTake")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"mvar-prototype-tryput"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvar-prototype-tryput"}},[t._v("#")]),t._v(" "),e("code",[t._v("MVar.prototype.tryPut")])]),t._v(" "),e("p",[t._v("A synchronous version of put.")]),t._v(" "),e("p",[t._v("If the MVar is empty, sets the contents of the MVar and returns true.\nIf the MVar is full, does nothing and returns false")]),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[t._v("mvar"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("tryPut")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"mvar-prototype-isempty"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvar-prototype-isempty"}},[t._v("#")]),t._v(" "),e("code",[t._v("MVar.prototype.isEmpty")])]),t._v(" "),e("p",[t._v("Check whether a given MVar is empty.")]),t._v(" "),e("p",[t._v("If the MVar is empty, returns true.\nIf the MVar is full, returns false.")]),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[t._v("mvar"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("isEmpty")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"mvar-prototype-tryread"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvar-prototype-tryread"}},[t._v("#")]),t._v(" "),e("code",[t._v("MVar.prototype.tryRead")])]),t._v(" "),e("p",[t._v("A synchronous version of read.")]),t._v(" "),e("p",[t._v("If the MVar is empty, throws an exception.\nIf the MVar is full, returns the contents of the MVar.")]),t._v(" "),e("p",[t._v("tryRead does not alter the contents of the MVar.")]),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[t._v("mvar"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("tryRead")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);